# docker-compose.yml
# PostgresSQL documentation: https://hub.docker.com/_/postgres
# docker compose down: stops and deletes containers, networks, volumes, and images that are defined
# docker compose up -d: starts application and all services, -d to run the services in the background
# docker exec -it factor_db psql -U postgres -d factor_data
  # docker exec -it: means run an interactive terminal in running container
  # factor_db: name of running container
  # psql -U postgres -d factor_data: use psql command-line interface to log into factor_data with postgres user

services: # definitions of all computing resources
  # each service will map string represetation of service names to their definitions

  r-model:
    build: 
      context: . # the context is the root because that is where the relevat Dockerfile is
      dockerfile: Dockerfile
    volumes: # persistent data stores
      - ./R:/app/R # format is source: target
      - ./notebooks:/app/notebooks
      - ./output:/app/output
      - .:/app # so that any outputted files in the main directory will be seen
    working_dir: /app
    user: "${UID}:${GID}" # to write files
    depends_on:
      db:
        condition: service_healthy

  db:
    image: postgres:15 # base image - needs to be downloaded from DockerHub
    container_name: factor_db # specify custom container name
    environment: # define environment variables set in the container
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: factor_data
    volumes: # define mount or host paths
      - ./db/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck: # wait-until-ready
      test: ["CMD-SHELL", "pg_isready -U postgres -d factor_data"]
      interval: 5s
      retries: 10
      start_period: 5s
    ports: # port that the service will be run from
      - "5432:5432"

  loader:
    # "build" section defines how to create Docker image
    build: ./data_loader # will create image withing data_loader subdirectory
    volumes: # bind-mount creates a link between the source and target
    - ./data_loader:/app
    - ./data:/app/data
    # "depends_on" is used to control order of service startup/shutdown
    depends_on: 
      db:
        condition: service_healthy

# the health-check guarantees both loader and R jobs start only after Postgres